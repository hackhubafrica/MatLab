import numpy as np
import matplotlib.pyplot as plt
from simple_pid import PID

# Motor parameters
R = 1.0  # Motor resistance (Ohms)
L = 0.5  # Motor inductance (Henries)
k_t = 0.01  # Motor torque constant (Nm/A)
k_e = 0.01  # Motor back-EMF constant (V/(rad/s))

# Panel and motor system
I_total = 0.1  # Total moment of inertia (kg.m^2)
motor_voltage = 12.0  # Max motor voltage (Volts)
motor_current = 0.0  # Initial motor current (Amps)
panel_angular_velocity = 0.0  # Initial angular velocity (rad/s)
panel_azimuth = 0.0  # Initial panel azimuth (degrees)

# Simulation parameters
time_step = 0.01  # Time step (seconds)
total_time = 10.0  # Total simulation time (seconds)

# Control System (PID)
pid = PID(1.0, 0.1, 0.05, setpoint=0)
pid.output_limits = (-motor_voltage, motor_voltage)  # Limit control signal to motor voltage

# Time tracking
times = []
panel_azimuths = []
sun_azimuths = []

# Simulate the system over time
for t in np.arange(0, total_time, time_step):
    # Example: Sun's azimuth changes over time (linear change)
    sun_azimuth = 30 + 1.5 * t  # degrees

    # Error between the sun and panel azimuth
    pid.setpoint = sun_azimuth
    control_signal = pid(panel_azimuth)  # Control signal is the voltage applied to the motor

    # Motor dynamics (including back-EMF and inductance)
    back_emf = k_e * panel_angular_velocity
    motor_current = (control_signal - back_emf) / R  # Ohm's law with back-EMF
    
    # Torque generated by motor
    motor_torque = k_t * motor_current
    
    # Angular acceleration of the panel
    angular_acceleration = motor_torque / I_total
    
    # Update panel's angular velocity and position
    panel_angular_velocity += angular_acceleration * time_step  # Angular velocity change
    panel_azimuth += np.degrees(panel_angular_velocity * time_step)  # Update panel azimuth in degrees

    # Store data for visualization
    times.append(t)
    panel_azimuths.append(panel_azimuth)
    sun_azimuths.append(sun_azimuth)

    print(f"Time: {t:.1f}s, Panel Azimuth: {panel_azimuth:.2f}, Sun Azimuth: {sun_azimuth:.2f}, Motor Torque: {motor_torque:.2f}")

# Plot the result
plt.plot(times, panel_azimuths, label="Panel Azimuth")
plt.plot(times, sun_azimuths, label="Sun Azimuth", linestyle="--")
plt.xlabel("Time (s)")
plt.ylabel("Azimuth (degrees)")
plt.legend()
plt.show()
